    }
    
    // Update UI function with enhanced state management
    function updateUI() {
        const wasPlaying = !audioPlayer.paused;
        const currentTime = audioPlayer.currentTime;
        const isAfter2PM = isAfter2PMPST();
        const isBefore159PM = isBefore159PMPST();
        const isAfter5PM = isAfter5PMPST();
        
        console.log(`Time check: After 2 PM: ${isAfter2PM}, Before 1:59 PM: ${isBefore159PM}, After 5 PM: ${isAfter5PM}`);
        
        // Apply background only during 2-5 PM period
        if (isAfter2PM && !isAfter5PM) {
            document.body.classList.add('with-background');
            
            // Check if we need to switch audio source
            if (!audioPlayer.src.includes(mainAudioPath)) {
                fadeAudioAndSwitch(mainAudioPath, wasPlaying, currentTime);
                showStatus('Switched to main audio');
            }
        } else {
            document.body.classList.remove('with-background');
            
            // Check if we need to switch audio source
            if (!audioPlayer.src.includes(staticAudioPath)) {
                fadeAudioAndSwitch(staticAudioPath, wasPlaying, currentTime);
                // Always show 'playing intermission' message for static audio
                showStatus('Playing intermission');
                
                // Ensure looping is enabled for static audio
                audioPlayer.loop = true;
                console.log('Static audio looping enabled');
                
                // Auto-play static audio if not already playing
                if (audioPlayer.paused) {
                    console.log('Auto-playing static audio');
                    // Note: The actual play() call is handled separately to avoid
                    // potential autoplay policy issues if this is called directly
                }
            }
        }
        
        // Show play button unless the audio is already playing
        if (audioPlayer.paused) {
            playButton.classList.remove('hidden');
            stopButton.classList.add('hidden');
        } else {
            playButton.classList.add('hidden');
            stopButton.classList.remove('hidden');
        }
    }
    
    // Function to fade audio and switch source
    function fadeAudioAndSwitch(newSource, wasPlaying, currentTime) {
        const currentSource = audioPlayer.src;
        if (currentSource.includes(newSource)) {
            return; // Already using the correct source
        }
        
        // Update the current path tracking
        currentAudioPath = newSource;
        
        // If we're just setting up, not playing, simply change source
        if (audioPlayer.paused) {
            audioPlayer.src = newSource;
            audioPlayer.load();
            return;
        }
        
        // Use crossfade for smoother transition
        return crossFade(newSource, 1500, 1500)
            .then(() => {
                console.log(`Switched audio to ${newSource}`);
            })
            .catch(error => {
                console.error('Error during audio switch:', error);
            });
    }
    
    // Initial UI update
    updateUI();
    
    // Setup time state check interval - checks every 30 seconds for state changes
    stateCheckInterval = setInterval(checkTimeState, 30000);
    
    // Also check time state when document regains visibility
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            console.log('Document became visible, checking time state');
            checkTimeState();
        }
    });
    
    // Initial server time fetch for accurate time
    getServerTimeAndSync();
    
    // Play button click event with better Chrome compatibility
    playButton.addEventListener('click', function() {
        // Allow playback at any time, but play different audio based on time
        const inMainAudioWindow = isAfter2PMPST() && !isAfter5PMPST();
